// Mocks generated by Mockito 5.4.4 from annotations
// in app_riverpod/test/home/notifier/home_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:app_riverpod/module/detail_transaction/route/detail_transaction_input_output.dart'
    as _i9;
import 'package:app_riverpod/module/home/route/home_input_output.dart' as _i11;
import 'package:app_riverpod/module/home/route/home_route.dart' as _i6;
import 'package:app_riverpod/module/submission/submssion_1/route/suhmission_1_input_output.dart'
    as _i10;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i4;
import 'package:go_router/go_router.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeProviderRef_0<State> extends _i1.SmartFake
    implements _i2.AutoDisposeProviderRef<State> {
  _FakeAutoDisposeProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRoute_1 extends _i1.SmartFake implements _i3.GoRoute {
  _FakeGoRoute_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i5.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [HomeRoute].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRoute extends _i1.Mock implements _i6.HomeRoute {
  MockHomeRoute() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeProviderRef<_i6.HomeRoute> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAutoDisposeProviderRef_0<_i6.HomeRoute>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeProviderRef<_i6.HomeRoute>);

  @override
  set ref(_i2.AutoDisposeProviderRef<_i6.HomeRoute>? _ref) =>
      super.noSuchMethod(
        Invocation.setter(
          #ref,
          _ref,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i3.GoRoute route() => (super.noSuchMethod(
        Invocation.method(
          #route,
          [],
        ),
        returnValue: _FakeGoRoute_1(
          this,
          Invocation.method(
            #route,
            [],
          ),
        ),
      ) as _i3.GoRoute);

  @override
  _i8.Future<_i9.DetailTransactionOutput?> navigateToDetailTransaction(
    _i4.BuildContext? context,
    _i9.DetailTransactionInput? input,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToDetailTransaction,
          [
            context,
            input,
          ],
        ),
        returnValue: _i8.Future<_i9.DetailTransactionOutput?>.value(),
      ) as _i8.Future<_i9.DetailTransactionOutput?>);

  @override
  _i8.Future<_i10.Submission1Output?> navigatetoSubmission(
    _i4.BuildContext? context,
    _i10.Submission1Input? input,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigatetoSubmission,
          [
            context,
            input,
          ],
        ),
        returnValue: _i8.Future<_i10.Submission1Output?>.value(),
      ) as _i8.Future<_i10.Submission1Output?>);

  @override
  _i8.Future<_i11.HomeOutput?> push(
    _i4.BuildContext? context,
    Null input,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [
            context,
            input,
          ],
        ),
        returnValue: _i8.Future<_i11.HomeOutput?>.value(),
      ) as _i8.Future<_i11.HomeOutput?>);

  @override
  _i8.Future<void> go(
    _i4.BuildContext? context,
    Null input,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #go,
          [
            context,
            input,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i4.InheritedWidget);

  @override
  void visitAncestorElements(_i4.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i4.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i5.DiagnosticsTreeStyle? style = _i5.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}
